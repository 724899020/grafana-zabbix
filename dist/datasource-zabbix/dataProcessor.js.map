{"version":3,"sources":["../../src/datasource-zabbix/dataProcessor.js"],"names":["limit","order","n","orderByFunc","timeseries","orderByCallback","aggregationFunctions","sortByIteratee","ts","values","_","map","datapoints","point","sortedTimeseries","sortBy","slice","setAlias","alias","target","replaceAlias","regexp","newAlias","pattern","utils","isRegex","buildRegex","replace","setAliasByRegex","extractText","str","extractPattern","RegExp","extractedValue","exec","groupByWrapper","interval","groupFunc","groupByCallback","groupBy","aggregateByWrapper","aggregateFunc","flattenedPoints","flatten","aggregateWrapper","percentil","partial","PERCENTIL","timeShift","range","shift","parseTimeShiftInterval","time","unShiftTimeSeries","unshift","dp","downsampleSeries","downsample","groupBy_perf","groupBy_exported","sumSeries","delta","rate","scale","factor","scale_perf","simpleMovingAverage","expMovingAverage","a","SUM","COUNT","AVERAGE","MIN","MAX","MEDIAN","metricFunctions","movingAverage","exponentialMovingAverage","aggregateBy","average","min","max","median","sum","count","top","bottom","avg"],"mappings":"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","file":"dataProcessor.js","sourcesContent":["import _ from 'lodash';\nimport * as utils from './utils';\nimport ts from './timeseries';\n\nlet downsampleSeries = ts.downsample;\nlet groupBy = ts.groupBy_perf;\nlet groupBy_exported = (interval, groupFunc, datapoints) => groupBy(datapoints, interval, groupFunc);\nlet sumSeries = ts.sumSeries;\nlet delta = ts.delta;\nlet rate = ts.rate;\nlet scale = (factor, datapoints) => ts.scale_perf(datapoints, factor);\nlet simpleMovingAverage = (n, datapoints) => ts.simpleMovingAverage(datapoints, n);\nlet expMovingAverage = (a, datapoints) => ts.expMovingAverage(datapoints, a);\n\nlet SUM = ts.SUM;\nlet COUNT = ts.COUNT;\nlet AVERAGE = ts.AVERAGE;\nlet MIN = ts.MIN;\nlet MAX = ts.MAX;\nlet MEDIAN = ts.MEDIAN;\nlet PERCENTIL = ts.PERCENTIL;\n\nfunction limit(order, n, orderByFunc, timeseries) {\n  let orderByCallback = aggregationFunctions[orderByFunc];\n  let sortByIteratee = (ts) => {\n    let values = _.map(ts.datapoints, (point) => {\n      return point[0];\n    });\n    return orderByCallback(values);\n  };\n  let sortedTimeseries = _.sortBy(timeseries, sortByIteratee);\n  if (order === 'bottom') {\n    return sortedTimeseries.slice(0, n);\n  } else {\n    return sortedTimeseries.slice(-n);\n  }\n}\n\nfunction setAlias(alias, timeseries) {\n  timeseries.target = alias;\n  return timeseries;\n}\n\nfunction replaceAlias(regexp, newAlias, timeseries) {\n  let pattern;\n  if (utils.isRegex(regexp)) {\n    pattern = utils.buildRegex(regexp);\n  } else {\n    pattern = regexp;\n  }\n\n  let alias = timeseries.target.replace(pattern, newAlias);\n  timeseries.target = alias;\n  return timeseries;\n}\n\nfunction setAliasByRegex(alias, timeseries) {\n  timeseries.target = extractText(timeseries.target, alias);\n  return timeseries;\n}\n\nfunction extractText(str, pattern) {\n  var extractPattern = new RegExp(pattern);\n  var extractedValue = extractPattern.exec(str);\n  extractedValue = extractedValue[0];\n  return extractedValue;\n}\n\nfunction groupByWrapper(interval, groupFunc, datapoints) {\n  var groupByCallback = aggregationFunctions[groupFunc];\n  return groupBy(datapoints, interval, groupByCallback);\n}\n\nfunction aggregateByWrapper(interval, aggregateFunc, datapoints) {\n  // Flatten all points in frame and then just use groupBy()\n  var flattenedPoints = _.flatten(datapoints, true);\n  var groupByCallback = aggregationFunctions[aggregateFunc];\n  return groupBy(flattenedPoints, interval, groupByCallback);\n}\n\nfunction aggregateWrapper(groupByCallback, interval, datapoints) {\n  var flattenedPoints = _.flatten(datapoints, true);\n  return groupBy(flattenedPoints, interval, groupByCallback);\n}\n\nfunction percentil(interval, n, datapoints) {\n  var flattenedPoints = _.flatten(datapoints, true);\n  var groupByCallback = _.partial(PERCENTIL, n);\n  return groupBy(flattenedPoints, interval, groupByCallback);\n}\n\nfunction timeShift(interval, range) {\n  let shift = utils.parseTimeShiftInterval(interval) / 1000;\n  return _.map(range, time => {\n    return time - shift;\n  });\n}\n\nfunction unShiftTimeSeries(interval, datapoints) {\n  let unshift = utils.parseTimeShiftInterval(interval);\n  return _.map(datapoints, dp => {\n    return [\n      dp[0],\n      dp[1] + unshift\n    ];\n  });\n}\n\nlet metricFunctions = {\n  groupBy: groupByWrapper,\n  scale: scale,\n  delta: delta,\n  rate: rate,\n  movingAverage: simpleMovingAverage,\n  exponentialMovingAverage: expMovingAverage,\n  aggregateBy: aggregateByWrapper,\n  // Predefined aggs\n  percentil: percentil,\n  average: _.partial(aggregateWrapper, AVERAGE),\n  min: _.partial(aggregateWrapper, MIN),\n  max: _.partial(aggregateWrapper, MAX),\n  median: _.partial(aggregateWrapper, MEDIAN),\n  sum: _.partial(aggregateWrapper, SUM),\n  count: _.partial(aggregateWrapper, COUNT),\n  sumSeries: sumSeries,\n  top: _.partial(limit, 'top'),\n  bottom: _.partial(limit, 'bottom'),\n  timeShift: timeShift,\n  setAlias: setAlias,\n  setAliasByRegex: setAliasByRegex,\n  replaceAlias: replaceAlias\n};\n\nlet aggregationFunctions = {\n  avg: AVERAGE,\n  min: MIN,\n  max: MAX,\n  median: MEDIAN,\n  sum: SUM,\n  count: COUNT\n};\n\nexport default {\n  downsampleSeries: downsampleSeries,\n  groupBy: groupBy_exported,\n  AVERAGE: AVERAGE,\n  MIN: MIN,\n  MAX: MAX,\n  MEDIAN: MEDIAN,\n  SUM: SUM,\n  COUNT: COUNT,\n  unShiftTimeSeries: unShiftTimeSeries,\n\n  get aggregationFunctions() {\n    return aggregationFunctions;\n  },\n\n  get metricFunctions() {\n    return metricFunctions;\n  }\n};\n"]}